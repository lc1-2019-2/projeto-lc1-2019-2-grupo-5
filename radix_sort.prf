(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3781683085
   ("" (expand permutations)
    (("" (skeep)
      (("" (skeep)
        (("" (expand radixsort)
          (("" (lemma "merge_sort_is_permutation[T, <<]")
            (("" (expand permutations)
              (("" (inst -1 "merge_sort[T, <=](l)" "x")
                (("" (replace -1 1)
                  (("" (lemma "merge_sort_is_permutation[T, <=]")
                    (("" (inst -1 "l")
                      (("" (expand permutations) (("" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (radixsort const-decl "list[T]" radix_sort nil))
   shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3777655189
   ("" (typepred "<<" "<=")
    (("" (expand "total_preorder?")
      (("" (expand "preorder?")
        (("" (prop)
          (("1" (hide -2 -3 -5 -6) (("1" (grind) nil nil)) nil)
           ("2" (expand "lex")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (copy -4)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -6)
                                  (("1"
                                    (inst -6 "y_1" "z" "x_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (copy -6)
                            (("2" (expand "transitive?" -1)
                              (("2"
                                (inst -1 "x_1" "y_1" "z")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -8)
                                    (("2"
                                      (inst -8 "y_1" "z" "x_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (copy -6)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -8)
                                  (("1"
                                    (inst -8 "z" "x_1" "y_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (copy -8)
                        (("2" (expand "transitive?" -1)
                          (("2" (inst -1 "x_1" "y_1" "z")
                            (("2" (assert)
                              (("2"
                                (expand "transitive?" -13)
                                (("2"
                                  (inst -13 "x_1" "y_1" "z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "lex")
            (("3" (expand "dichotomous?" 1)
              (("3" (skeep)
                (("3" (hide -2 -5)
                  (("3" (copy -2)
                    (("3" (copy -5)
                      (("3" (expand "dichotomous?" -2)
                        (("3" (inst?)
                          (("3" (prop)
                            (("1" (expand "dichotomous?" -4)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dichotomous?" -4)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   nil))
 (radixsort_sorts 0
  (radixsort_sorts-1 nil 3781885991
   ("" (skeep)
    (("" (expand radixsort)
      (("" (lemma "merge_sort_is_sorted[T, <<]")
        (("" (inst -1 "merge_sort[T, <=](l)")
          (("" (expand is_sorted?)
            (("" (expand lex)
              (("" (skeep)
                (("" (split 1)
                  (("1" (inst?) (("1" (grind) nil nil)) nil)
                   ("2" (split)
                    (("1" (inst?) (("1" (grind) nil nil)) nil)
                     ("2" (propax) nil nil)
                     ("3" (inst -2 "k")
                      (("3" (lemma "merge_sort_is_conservative[T, <<]")
                        (("3"
                          (inst -1 "merge_sort[T, <=](l)" "k" "1 + k")
                          (("3" (split -1)
                            (("1" (skolem -1 ("a" "b"))
                              (("1"
                                (flatten -1)
                                (("1"
                                  (replace -2 1)
                                  (("1"
                                    (replace -3 1)
                                    (("1"
                                      (lemma
                                       "is_sorted_implies_monotone[T, <=]")
                                      (("1"
                                        (inst
                                         -1
                                         "merge_sort[T, <=](l)")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -1 "b" "a")
                                            nil
                                            nil)
                                           ("2"
                                            (lemma
                                             "merge_sort_is_sorted[T, <=]")
                                            (("2"
                                              (inst -1 "l")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (merge_sort_is_sorted formula-decl nil mergesort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (merge_sort_is_conservative formula-decl nil mergesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b skolem-const-decl "below[length(merge_sort[T, <=](l))]"
     radix_sort nil)
    (a skolem-const-decl "below[length(merge_sort[T, <=](l))]"
     radix_sort nil)
    (l skolem-const-decl "list[T]" radix_sort nil)
    (is_sorted_implies_monotone formula-decl nil sorting nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (lex const-decl "bool" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (radixsort const-decl "list[T]" radix_sort nil))
   shostak)))

